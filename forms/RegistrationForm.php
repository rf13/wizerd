<?php

namespace app\forms;

use Yii;
use yii\db\Exception;
use yii\base\Model;
use app\models\Business;
use app\models\Consumer;
use app\models\Industry;
use app\models\Menu;
use app\models\Token;
use app\models\User;
use app\models\ZipCode;
use yii\helpers\Html;
use yii\helpers\Url;

/**
 * RegistrationForm is the model behind the registration form.
 */
class RegistrationForm extends Model
{

    public $role;
    public $email;
    public $confirm_email;
    public $password;
    public $confirm_password;
    public $zip_code;
    public $main_cat;
    public $first_name;
    public $last_name;
    public $auth_key;

    public function rules()
    {
        return [
            [['role', 'email', 'confirm_email', 'password', 'confirm_password'], 'required', 'message' => '{attribute} can’t be blank.'],
            [['password'], 'string', 'min' => 8, 'max' => 16],
            [['confirm_password'], 'string', 'min' => 8, 'max' => 16, 'tooShort' => 'These passwords don’t match. Please try again.', 'tooLong' => 'These passwords don’t match. Please try again.'],
            [['role', 'first_name', 'last_name'], 'string', 'max' => 50],

            [['first_name', 'last_name'], 'required', 'message' => '{attribute} can’t be blank.', 'when' => function ($model) {
                return $model->role == User::ROLE_CONS;
            }, 'whenClient' => "function (attribute, value) {
                return $('#registrationform-role').val() == 'consumer';
            }"],
            ['main_cat', 'integer'],
            [
                ['main_cat'], 'exist', 'skipOnError' => true,
                'targetClass' => Industry::className(),
                'targetAttribute' => ['main_cat' => 'id']
            ],

            /*
             * when has Biz and Cons
            */
            [['zip_code', 'main_cat'], 'required', 'message' => '{attribute} can’t be blank.', 'when' => function ($model) {
                return $model->role == User::ROLE_BUSN;
            }, 'whenClient' => "function (attribute, value) {
                return $('#registrationform-role').val() == 'business';
            }"],

            /*
             * When has only Biz

            [['zip_code', 'main_cat'], 'required', 'message' => '{attribute} can’t be blank.'],
            */

            [['email', 'confirm_email'], 'email', 'message' => 'This is not a valid email address.'],
            [
                'email', 'unique',
                'targetClass' => User::className(),
                'message' => 'Sorry, this email was already registered'
            ],
            ['confirm_email', 'compare', 'compareAttribute' => 'email', 'message' => 'These emails don’t match. Please try again.'],
            ['confirm_password', 'compare', 'compareAttribute' => 'password', 'message' => 'These passwords don’t match. Please try again.'],
            //['zip_code', 'validateUSAZip'],
            ['zip_code', 'validateActiveZip'],
        ];
    }

//    public function init()
//    {
//        $this->role = User::ROLE_BUSN;
//        parent::init(); // TODO: Change the autogenerated stub
//    }

    public function validateUSAZip($attribute, $params)
    {
        if (!preg_match("/^([0-9]{5})(-[0-9]{4})?$/i", $this->zip_code)) {
            $this->addError('zip_code', 'Zip code must contain 5 digits.');
        }
    }
    public function validateActiveZip($attribute, $params)
    {
        if (!preg_match("/^([0-9]{5})(-[0-9]{4})?$/i", $this->zip_code)) {
            $this->addError('zip_code', 'Zip code must contain 5 digits.');
        }else
            if(!ZipCode::isActiveZipCode($this->zip_code)){
                $this->addError('zip_code', 'Inactive Zip Code');
            }
    }
    public function attributeLabels()
    {
        return [
            'role' => 'I\'m signing up as a',
            'email' => 'Email',
            'confirm_email' => 'Confirm email',
            'password' => 'Password',
            'confirm_password' => 'Confirm password',
            'zip_code' => 'Business zip code',
            'main_cat' => 'Industry',
            'first_name' => 'First name',
            'last_name' => 'Last name'
        ];
    }

    /**
     * Loads attributes to the user model.
     *
     * @param User $user
     */
    protected function loadAttributes(User $user)
    {
        $user->setAttributes($this->attributes);
    }

    /**
     * Registers a new user account. If registration was successful it will set flash message.
     * @return boolean|string
     */
    public function register()
    {
        if (!$this->validate()) return false;
        $transaction = Yii::$app->db->beginTransaction();
        try {
            $user = new User();
            $user->email = $this->email;
            $user->generatePassword($this->password);
            if (!$user->save(false)) {
                Yii::$app->session->setFlash(
                    'error',
                    'An error occurred while creating user'
                );
                $transaction->rollBack();
                return false;
            }
            $user_id = $user->getPrimaryKey();
            $auth = Yii::$app->authManager;
            if ($this->email == Yii::$app->params['adminEmail']) {
                $authorRole = $auth->getRole(User::ROLE_ADMIN);
            } else {

                if ($this->role == User::ROLE_BUSN) {
                    $account = new Business();
                    $account->user_id = $user_id;
                    $account->ind_id = $this->main_cat;

                    $zip = new ZipCode();
                    $zip_code = $zip->getZipCode($this->zip_code);
                    if ($zip_code) $account->zip_id = $zip_code->getAttribute('id');
                    else $account->zip_notice = $this->zip_code;
                    $account->latitude = $zip_code->latitude;
                    $account->longitude = $zip_code->longitude;


                } else {
                    $account = new Consumer();
                    $account->user_id = $user_id;
                    $name = empty($this->first_name) ? 'User' : $this->first_name;
                    $account->nickname = $name;
                    $account->first_name = $name;
                    $account->last_name = $this->last_name;
                }
                if (!$account->save(false)) {
                    Yii::$app->session->setFlash(
                        'error',
                        'Your account has not been created'
                    );
                    $transaction->rollBack();
                    return false;
                }
                if ($this->role == User::ROLE_BUSN) {
                    /*
                    $menu = new Menu();
                    $menu->bus_id = $account->getPrimaryKey();
                    $menu->title=  Menu::DEFAULT_MENU_NAME;
                   
                    if (!$menu->save(false)) {
                        Yii::$app->session->setFlash(
                            'error',
                            'There was an error when assigning the menu'
                        );
                        $transaction->rollBack();
                        return false;
                    }
                    
                    if (!$menu->setDefaultCat()) {
                        Yii::$app->session->setFlash(
                            'error',
                            'There was an error when assigning the cat'
                        );
                        $transaction->rollBack();
                        return false;
                    }
                   */
                }
                $authorRole = $auth->getRole($this->role);

            }
            $auth->assign($authorRole, $user_id);
            $success = 'Your account has been created.';

            $token = new Token();
            $token->user_id = $user_id;
            $token->type = Token::TYPE_CONFIRMATION;
            if (!$token->save(false)) {
                Yii::$app->session->setFlash(
                    'error',
                    'There was an error when creating access token'
                );
                $transaction->rollBack();
                return false;
            }

            if (Yii::$app->message->sendConfirmationMessage($user, $token)) {
                $success .= ' Please check your email for further instructions.';
            }
            $success .= ' If you don\'t receive the confirmation email, then ' . Html::a('click here', Url::to('reconfirmation')) . ' to have it sent again.';

            Yii::$app->session->setFlash('info', $success);
            $transaction->commit();
        } catch (Exception $e) {
            Yii::$app->session->setFlash(
                'error',
                'There was an error when assigning ' . json_encode($e)
            );

            //print_r($e);

            $transaction->rollBack();
            return false;
        }
        return true;
    }
}
